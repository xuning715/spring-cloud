<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-4.2.xsd">
    <bean id="redcubeMasterDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${mysql.driverClassName}" />

        <property name="url" value="${mysql.url}" />
        <property name="username" value="${mysql.username}" />
        <property name="password" value="${mysql.password}" />

        <property name="initialSize" value="${mysql.initialSize}" />
        <property name="minIdle" value="${mysql.minIdle}" />
        <property name="maxActive" value="${mysql.maxActive}" />

        <property name="maxWait" value="${mysql.maxWait}" />
        <property name="timeBetweenEvictionRunsMillis" value="${mysql.timeBetweenEvictionRunsMillis}" />
        <property name="minEvictableIdleTimeMillis" value="${mysql.minEvictableIdleTimeMillis}" />

        <property name="validationQuery" value="${mysql.validationQuery}" />
        <property name="testWhileIdle" value="${mysql.testWhileIdle}" />
        <property name="testOnBorrow" value="${mysql.testOnBorrow}" />
        <property name="testOnReturn" value="${mysql.testOnReturn}" />

        <property name="poolPreparedStatements" value="${mysql.poolPreparedStatements}" />
        <property name="maxOpenPreparedStatements" value="${mysql.maxOpenPreparedStatements}" />

        <!--<property name="filters" value="${mysql.filters}" />-->
    </bean>
    <bean id="redcubeSlaveDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <property name="driverClassName" value="${mysql.driverClassName}" />

        <property name="url" value="${mysql.url}" />
        <property name="username" value="${mysql.username}" />
        <property name="password" value="${mysql.password}" />

        <property name="initialSize" value="${mysql.initialSize}" />
        <property name="minIdle" value="${mysql.minIdle}" />
        <property name="maxActive" value="${mysql.maxActive}" />

        <property name="maxWait" value="${mysql.maxWait}" />
        <property name="timeBetweenEvictionRunsMillis" value="${mysql.timeBetweenEvictionRunsMillis}" />
        <property name="minEvictableIdleTimeMillis" value="${mysql.minEvictableIdleTimeMillis}" />

        <property name="validationQuery" value="${mysql.validationQuery}" />
        <property name="testWhileIdle" value="${mysql.testWhileIdle}" />
        <property name="testOnBorrow" value="${mysql.testOnBorrow}" />
        <property name="testOnReturn" value="${mysql.testOnReturn}" />

        <property name="poolPreparedStatements" value="${mysql.poolPreparedStatements}" />
        <property name="maxOpenPreparedStatements" value="${mysql.maxOpenPreparedStatements}" />

        <!--<property name="filters" value="${mysql.filters}" />-->
    </bean>
    <!-- 定义数据源，继承了spring的动态数据源 -->
    <bean id="dynamicDataSource" class="com.x.framework.dao.DynamicDataSource" lazy-init="true">
        <!-- 设置多个数据源 -->
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <!-- 这些设置的key和determineCurrentLookupKey方法拿到的key相比对, 根据匹配选择数据源 -->
                <entry key="master" value-ref="redcubeMasterDataSource"/>
                <entry key="slave" value-ref="redcubeSlaveDataSource"/>
            </map>
        </property>
        <!-- 设置默认的数据源，这里默认走写库 -->
        <property name="defaultTargetDataSource" ref="redcubeMasterDataSource"/>
        <property name="methodType">
            <map key-type="java.lang.String">
                <entry key="master" value="insert,update,delete"/>
                <entry key="slave" value="select,find,query"/>
            </map>
        </property>
    </bean>
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource">
            <ref bean="dynamicDataSource"/>
        </property>
        <property name="fetchSize" value="50"/>
    </bean>
    <bean id="xJdbcTemplate" class="com.x.framework.dao.XJdbcTemplate">
        <property name="dataBaseType" value="MYSQL"/>
        <property name="jdbcTemplate">
            <ref bean="jdbcTemplate"/>
        </property>
    </bean>
</beans>

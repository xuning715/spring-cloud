<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-4.2.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">

    <context:annotation-config/>

    <bean class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
        <property name="maxInactiveIntervalInSeconds" value="3600"></property>
    </bean>

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.maxTotal}" />
        <property name="maxIdle" value="${redis.maxIdle}" />
        <property name="minIdle" value="${redis.minIdle}" />
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
    </bean>

    <bean id="redisStandaloneConfiguration" class="org.springframework.data.redis.connection.RedisStandaloneConfiguration">
        <property name="hostName" value="${redis.host}"/>
        <property name="port" value="${redis.port}"/>
        <property name="database" value="${redis.database}"/>
        <property name="password">
            <bean class="org.springframework.data.redis.connection.RedisPassword">
                <constructor-arg index="0" value="${redis.password}"/>
            </bean>
        </property>
    </bean>

    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">
        <constructor-arg name="standaloneConfig" ref="redisStandaloneConfiguration"/>
    </bean>

    <bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
    <bean id="genericJackson2JsonRedisSerializer" class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer">
        <!-- 使用默认的 ObjectMapper，移除JSON格式化后的 “@Class”节点 -->
        <constructor-arg name="mapper">
            <bean class="com.fasterxml.jackson.databind.ObjectMapper"/>
        </constructor-arg>
    </bean>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory" />
        <property name="keySerializer" ref="stringRedisSerializer" />
        <property name="valueSerializer" ref="stringRedisSerializer" />
        <property name="hashKeySerializer" ref="stringRedisSerializer" />
        <property name="hashValueSerializer" ref="genericJackson2JsonRedisSerializer" />
    </bean>

    <!--<bean id="xRedisTemplate" class="com.x.framework.redis.XRedisTemplate" />-->
    <!--<bean id="redisAspect" class="com.x.framework.aop.RedisAspect">-->
        <!--<constructor-arg name="expireSeconds" value="${redis.expireSeconds}" />-->
    <!--</bean>-->

    <!--<aop:config>-->
        <!--<aop:pointcut id="redisGetPointcut" expression="execution(* com.x.application.service.*Service.select*(..))" />-->
        <!--<aop:pointcut id="redisRemovePointcut" expression="execution(* com.x.application.service.*Service.insert*(com.x.framework.model.BaseObject+,..)) and args(arg,..) || execution(* com.x.application.service.*Service.update*(com.x.framework.model.BaseObject+,..)) and args(arg,..) || execution(* com.x.application.service.*Service.delete*(com.x.framework.model.BaseObject+,..)) and args(arg,..)" />-->
        <!--<aop:aspect id="redisAspect" ref="redisAspect">-->
            <!--<aop:around pointcut-ref="redisGetPointcut" method="aroundRedisGet" />-->
            <!--<aop:after-returning pointcut-ref="redisRemovePointcut" method="afterReturnRedisRemove" />-->
        <!--</aop:aspect>-->
    <!--</aop:config>-->

</beans>
